extends ../../layout/default.pug
include ../../mixins/testDescription

block main
    + test-description()
    .dialog-overlay#dialogOverlay
        // Nội dung của dialog
        .dialog-content#dialogContent
            p.sent#question-dialog Câu trả lời của bạn đã được gửi đi.
            .footer-dialog
                button#btn-close(onclick="closeDialog()")  Đóng
    .container-fluid.mt-4
        .card.mb-4
            .card-header.pb-0.ptit-color.c-white
                h6.mb-10 Danh sách câu hỏi
            .card-body
                #questionsContainer
            // Đoạn mã Pug đã được nhúng vào đây
            doctype html
            html(lang="en")
                head
                    meta(name="viewport" content="width=device-width, initial-scale=1.0")
                    title Rich Text Editor
                    //- FontAwesome Icons
                    link(rel="stylesheet", href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.1.1/css/all.min.css")
                    //- Google Fonts
                    link(href="https://fonts.googleapis.com/css2?family=Poppins&display=swap", rel="stylesheet")

                    link(rel="stylesheet", href="/css/textinput.css")

                body
                    .container
                        .options
                            //- Text Format
                            button#bold.option-button.format
                                i.fa-solid.fa-bold
                            button#italic.option-button.format
                                i.fa-solid.fa-italic
                            button#underline.option-button.format
                                i.fa-solid.fa-underline
                            button#strikethrough.option-button.format
                                i.fa-solid.fa-strikethrough
                            button#superscript.option-button.script
                                i.fa-solid.fa-superscript
                            button#subscript.option-button.script
                                i.fa-solid.fa-subscript
                            //- List
                            button#insertOrderedList.option-button
                                i.fa-solid.fa-list-ol
                            button#insertUnorderedList.option-button
                                i.fa-solid.fa-list
                            //- Undo/Redo
                            button#undo.option-button
                                i.fa-solid.fa-rotate-left
                            button#redo.option-button
                                i.fa-solid.fa-rotate-right
                            //- Link
                            button#createLink.adv-option-button
                                i.fa.fa-link
                            button#unlink.option-button
                                i.fa.fa-unlink
                            //- Alignment
                            button#justifyLeft.option-button.align
                                i.fa-solid.fa-align-left
                            button#justifyCenter.option-button.align
                                i.fa-solid.fa-align-center
                            button#justifyRight.option-button.align
                                i.fa-solid.fa-align-right
                            button#justifyFull.option-button.align
                                i.fa-solid.fa-align-justify
                            button#indent.option-button.spacing
                                i.fa-solid.fa-indent
                            button#outdent.option-button.spacing
                                i.fa-solid.fa-outdent
                            //- Headings
                            select#formatBlock.adv-option-button
                                option(value="H1") H1
                                option(value="H2") H2
                                option(value="H3") H3
                                option(value="H4") H4
                                option(value="H5") H5
                                option(value="H6") H6
                            //- Font
                            select#fontName.adv-option-button
                            select#fontSize.adv-option-button
                            //- Color
                            .input-wrapper
                                input#foreColor(type="color", class="adv-option-button")
                                label(for="foreColor") Font Color
                            .input-wrapper
                                input#backColor(type="color", class="adv-option-button")
                                label(for="backColor") Highlight Color
                        #text-input(contenteditable="true")
                        //- Phần tử input để chọn tệp
                        input#file-input(type="file", accept=".docx", style="display: none;")
                        //- Nút hoặc phần tử khác dùng để chọn tệp
                        label(for="file-input", id="file-button") Chọn tệp
                        button#get-text-button Lấy đoạn văn bản
                    //- Script
                    script(src="script.js")
                script(src="https://cdnjs.cloudflare.com/ajax/libs/mammoth/1.5.1/mammoth.browser.min.js")
                script.
                    document.getElementById('file-input').addEventListener('input', function(event) {
                        var fileInput = event.target;  
                        var file = event.target.files[0]; // Lấy file được chọn
                            
                        mammoth.convertToHtml({arrayBuffer: file})
                            .then(function(result){
                                document.getElementById('text-input').innerHTML = result.value;
                            })
                            .catch(function(err){
                                console.log(err);
                            });
                        event.target.value = null
                    });
                    let optionsButtons = document.querySelectorAll(".option-button");
                    let advancedOptionButton = document.querySelectorAll(".adv-option-button");
                    let fontName = document.getElementById("fontName");
                    let fontSizeRef = document.getElementById("fontSize");
                    let writingArea = document.getElementById("text-input");
                    let linkButton = document.getElementById("createLink");
                    let alignButtons = document.querySelectorAll(".align");
                    let spacingButtons = document.querySelectorAll(".spacing");
                    let formatButtons = document.querySelectorAll(".format");
                    let scriptButtons = document.querySelectorAll(".script");

                    //List of fontlist
                    let fontList = [
                    "Arial",
                    "Verdana",
                    "Times New Roman",
                    "Garamond",
                    "Georgia",
                    "Courier New",
                    "cursive",
                    ];

                    //Initial Settings
                    const initializer = () => {
                    //function calls for highlighting buttons
                    //No highlights for link, unlink,lists, undo,redo since they are one time operations
                    highlighter(alignButtons, true);
                    highlighter(spacingButtons, true);
                    highlighter(formatButtons, false);
                    highlighter(scriptButtons, true);

                    //create options for font names
                    fontList.map((value) => {
                        let option = document.createElement("option");
                        option.value = value;
                        option.innerHTML = value;
                        fontName.appendChild(option);
                    });

                    //fontSize allows only till 7
                    for (let i = 1; i <= 7; i++) {
                        let option = document.createElement("option");
                        option.value = i;
                        option.innerHTML = i;
                        fontSizeRef.appendChild(option);
                    }

                    //default size
                    fontSizeRef.value = 3;
                    };

                    //main logic
                    const modifyText = (command, defaultUi, value) => {
                    //execCommand executes command on selected text
                    document.execCommand(command, defaultUi, value);
                    };

                    //For basic operations which don't need value parameter
                    optionsButtons.forEach((button) => {
                    button.addEventListener("click", () => {
                        modifyText(button.id, false, null);
                    });
                    });

                    //options that require value parameter (e.g colors, fonts)
                    advancedOptionButton.forEach((button) => {
                    button.addEventListener("change", () => {
                        modifyText(button.id, false, button.value);
                    });
                    });

                    //link
                    linkButton.addEventListener("click", () => {
                    let userLink = prompt("Enter a URL");
                    //if link has http then pass directly else add https
                    if (/http/i.test(userLink)) {
                        modifyText(linkButton.id, false, userLink);
                    } else {
                        userLink = "http://" + userLink;
                        modifyText(linkButton.id, false, userLink);
                    }
                    });

                    //Highlight clicked button
                    const highlighter = (className, needsRemoval) => {
                    className.forEach((button) => {
                        button.addEventListener("click", () => {
                        //needsRemoval = true means only one button should be highlight and other would be normal
                        if (needsRemoval) {
                            let alreadyActive = false;

                            //If currently clicked button is already active
                            if (button.classList.contains("active")) {
                            alreadyActive = true;
                            }

                            //Remove highlight from other buttons
                            highlighterRemover(className);
                            if (!alreadyActive) {
                            //highlight clicked button
                            button.classList.add("active");
                            }
                        } else {
                            //if other buttons can be highlighted
                            button.classList.toggle("active");
                        }
                        });
                    });
                    };

                    const highlighterRemover = (className) => {
                    className.forEach((button) => {
                        button.classList.remove("active");
                    });
                    };

                    document.addEventListener("keydown", function (event) {
                    // Kiểm tra xem có đồng thời nhấn Ctrl và Space không
                    if (event.ctrlKey && event.key === " ") {
                        // Ngăn chặn hành động mặc định của Ctrl + Space (thường là mở hoặc đóng bàn phím)
                        event.preventDefault();

                        // Lấy vị trí con trỏ chuột
                        var selection = window.getSelection();
                        var range = selection.getRangeAt(0);
                        var selectedNode = range.startContainer;
                        var offset = range.startOffset;

                        // Tạo một phần tử div không thể sửa đổi
                        var newNode = document.createElement("div");
                        newNode.style.backgroundColor = "rgb(252, 228, 236)"; // Màu nền hồng nhạt
                        newNode.style.display = "inline"; // Hiển thị như một phần tử inline
                        newNode.style.cursor = "default"; // Không hiển thị con trỏ khi di chuột qua
                        newNode.contentEditable = "false"; // Không thể sửa đổi

                        // Đặt văn bản cho phần tử mới
                        newNode.textContent = "câu hỏi: ";

                        // Chèn phần tử mới vào vị trí con trỏ chuột
                        range.insertNode(newNode);

                        // Di chuyển con trỏ tới vị trí sau khi chèn phần tử
                        range.setStartAfter(newNode);
                        range.collapse(true);

                        // Xóa các vùng chọn hiện có và thêm vùng chọn mới
                        selection.removeAllRanges();
                        selection.addRange(range);
                    }

                    // Kiểm tra xem có đồng thời nhấn Ctrl và D không
                    if (event.ctrlKey && (event.key === "d" || event.key === "D")) {
                        // Ngăn chặn hành động mặc định của Ctrl + Space (thường là mở hoặc đóng bàn phím)
                        event.preventDefault();

                        // Lấy vị trí con trỏ chuột
                        var selection = window.getSelection();
                        var range = selection.getRangeAt(0);
                        var selectedNode = range.startContainer;
                        var offset = range.startOffset;

                        // Tạo một phần tử div không thể sửa đổi
                        var newNode = document.createElement("div");
                        newNode.style.backgroundColor = "rgb(232 228 252)"; // Màu nền hồng nhạt
                        newNode.style.display = "inline"; // Hiển thị như một phần tử inline
                        newNode.style.cursor = "default"; // Không hiển thị con trỏ khi di chuột qua
                        newNode.contentEditable = "false"; // Không thể sửa đổi

                        // Đặt văn bản cho phần tử mới
                        newNode.textContent = "đáp án: ";

                        // Chèn phần tử mới vào vị trí con trỏ chuột
                        range.insertNode(newNode);

                        // Di chuyển con trỏ tới vị trí sau khi chèn phần tử
                        range.setStartAfter(newNode);
                        range.collapse(true);

                        // Xóa các vùng chọn hiện có và thêm vùng chọn mới
                        selection.removeAllRanges();
                        selection.addRange(range);
                    }
                    });

                    const TH1_BACKGROUND_COLOR = "rgb(252, 228, 236)"; // màu nền cho câu hỏi
                    const TH2_BACKGROUND_COLOR = "rgb(232, 228, 252)"; // màu nền cho đáp án

                    document.getElementById("get-text-button").onclick = function () {
                    let questionsAndAnswers = [];
                    // let currentQuestion = null;
                    let textContents = [];
                    let stt = 0;
                    let status = "question";
                    let currentQuestion = { question: null, answers: [] };

                    // Lấy tất cả các phần tử p trong #text-input
                    const paragraphs = document.querySelectorAll("#text-input > p");

                    let combinedText = "";

                    paragraphs.forEach((paragraph) => {
                        // Kiểm tra xem phần tử hiện tại có chứa div contenteditable="false" không
                        const div = paragraph.querySelector('div[contenteditable="false"]');
                        if (div) {
                        textContents.push(combinedText.trim());
                        if (status == "question") currentQuestion.question = combinedText.trim();
                        else currentQuestion.answers.push(combinedText.trim());
                        // console.log(div.style.backgroundColor);
                        if (div.style.backgroundColor === TH1_BACKGROUND_COLOR) {
                            status = "question";
                            // console.log(currentQuestion);
                            questionsAndAnswers.push(currentQuestion);
                            currentQuestion = { question: null, answers: [] };
                        } else {
                            status = "answer";
                        }
                        combinedText = "";
                        let nextNode = div.nextSibling;

                        // Kiểm tra các nút tiếp theo để tìm đoạn văn bản
                        while (nextNode) {
                            if (nextNode.nodeType === Node.TEXT_NODE) {
                            combinedText += nextNode.textContent.trim();
                            } else if (nextNode.nodeType === Node.ELEMENT_NODE) {
                            combinedText += nextNode.textContent.trim();
                            }
                            nextNode = nextNode.nextSibling;
                        }
                        } else {
                        // Nếu không, thêm nội dung của phần tử vào combinedText
                        combinedText += paragraph.textContent.trim() + "\n";
                        }
                    });

                    // Nếu combinedText còn lại sau khi lặp qua tất cả các phần tử p, lưu nó vào mảng
                    if (combinedText) {
                        textContents.push(combinedText.trim());
                        if (status == "question") currentQuestion.question = combinedText.trim();
                        else currentQuestion.answers.push(combinedText.trim());
                        questionsAndAnswers.push(currentQuestion);
                    }

                    // Hiển thị kết quả trong console
                    console.log(questionsAndAnswers);
                    questionsAndAnswers.shift()
                    render2(questionsAndAnswers)
                    };

                    window.onload = initializer();

                